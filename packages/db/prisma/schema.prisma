// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                            Int         @id @default(autoincrement())
  clerkId                       String      @unique
  participant                   Participant @relation(fields: [participantId], references: [id])
  participantId                 Int         @unique
  pushTokens                    PushToken[]
  comments                      Comment[]
  posts                         Post[]
  likes                         Likes[]
  notificationOnPostLikes       Boolean     @default(false)
  notificationOnPostComments    Boolean     @default(false)
  notificationOnAnnoucements    Boolean     @default(false)
  notificationOnScheduleUpdates Boolean     @default(false)
}

model Developers {
  name    String @id
  upvotes Int    @default(0)
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  contents  String?
  images    Bytes[]
  createdAt DateTime  @default(now())
  comments  Comment[]
  postType  PostType
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  likes     Likes[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  text      String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Activity {
  id              Int           @id @default(autoincrement())
  name            String
  day             DateTime      @db.Date
  startTime       DateTime      @db.Time()
  durationMinutes Int
  leader          String
  location        String
  subactivities   Subactivity[]
  absence         Absence[]
}

model Subactivity {
  id              Int      @id @default(autoincrement())
  name            String
  startTime       DateTime @db.Time()
  durationMinutes Int
  location        String?
  activity        Activity @relation(fields: [activityId], references: [id])
  activityId      Int
}

model Absence {
  id            Int         @id @default(autoincrement())
  participant   Participant @relation(fields: participantId, references: id)
  participantId Int
  absenceDate   DateTime    @db.Date
  activity      Activity    @relation(fields: [activityId], references: id)
  activityId    Int

  @@unique([absenceDate, participantId, activityId])
}

// A participant can be linked to multiple users (i.e. two users can have the same participant)
model Participant {
  id       Int       @id @default(autoincrement())
  name     String
  users    User[]
  absences Absence[]
}

model Likes {
  id     Int  @id @default(autoincrement())
  postId Int
  userId Int
  post   Post @relation(fields: postId, references: id)
  user   User @relation(fields: userId, references: id)
}

model PushToken {
  token   String  @unique
  userId  Int
  user    User    @relation(fields: [userId], references: [id])
  isValid Boolean @default(true)
}

enum PostType {
  Announcement
  Discussion
}
